
به شِرزومه (Share + Resume’) خوش‌آمدید!
در این سایت امکاناتی از جمله پنل کاربری، اشتراک و حذف رزومه توسط کاربر، تغییر رمزعبور، مشاهده‌ی رزومه‌ی دیگران، ایجاد کامنت و... پیاده‌سازی شده است که در ادامه، به تک‌تک آنها خواهیم پرداخت. برای مشاهده‌ی کامل کد اصلی، می‌توانید به لینک بالای صفحه مراجعه کنید.


توضیحات Heroku

برای فرستادن یک اپلیکیشن پایتون برروی وب، احتیاج به یک HOST داریم که سایت heroku به صورت مجانی این امکان را در اختیار ما قرار می‌دهد.
ابتدا وارد سایت هروکو می‌شویم و یک اکانت رایگان می‌سازیم. سپس کنسول هروکو که Heroku CLI نام دارد را دانلود کرده و روی کامپیوتر خود نصب می‌کنیم. پس از نصب پکیج های لازم از پیپ، Command Prompt را باز کرده و دستور heroku login را وارد می‌کنیم تا به صورت ریموت به آن دسترسی پیدا کنیم.
لینک گیت هاب برنامه‌ی اصلی را در دستور git clone [github_project_link] قرار می‌دهیم تا آنرا دریافت کند و دستور cd sharesume ما را به فولدر برنامه انتقال می‌دهد. حال نیاز داریم که یک محیط مجازی یا Virtual Environment بسازیم تا کتابخانه‌ی فلاسک را در پروژه تعریف کند.
دستور virtualenv venv این محیط را می‌سازد و با رفتن به  cd venv/Scripts و اجرا کردن فایل دسته‌ای .\activate، فعال می‌شود. سپس از pip install flask gunicorn jinja2 کمک می‌گیریم تا کتابخانه های لازم را نصب کند (gunicorn یک کتابخانه‌ی وب سرور است). حال به یک فایل Procfile نیاز داریم که یک فایل متنی شامل نوع پردازش سرور است.
در فایل Procfile دستور web: gunicorn app:app را می‌نویسیم که app اول نام فایل سورس‌کد پایتون است و app بعدی نام متغیری است که Instance فلاسک را در آن قرار دادیم؛ فایل Procfile نباید پسوند .txt داشته باشد. درنهایت، آخرین فایلی که نیاز داریم فایل requirements است که پیپ با دستور pip freeze > requirements.txt برای ما می‌سازد.
پس از ایجاد تمام فایل‌های ضروری، کنسول را باز کرده و بعد از login کردن، دستور heroku create [name] را وارد می‌کنیم که نام آن اختیاری بوده و در اصل نام  پروژه‌ی ما در هروکو می‌باشد.
در نهایت با دستور git push heroku master تمام فایل‌های پروژه در اپلیکیشن ساخته شده‌ی هروکو push می‌شود و پس از اتمام آپلود و deploy نهایی، در لینک https://[name].herokuapp.com منتشر می‌شود.


توضیحات پایتون

      1. مقدمات پایگاه داده: در این پروژه از SQLite برای ذخیره‌ی اطلاعات کاربران، کامنت‌ها، رزومه ها و ... استفاده شده است. پس از import کردن sqlite3، یک کانکشن به فایل “sharesume.db” زده می‌شود که درصورت فقدان پایگاه داده، آن را ابتدا می‌سازد و سپس با آن ارتباط برقرار می‌کند.
درصورتی که این فایل برای بار اول ساخته شود حجم آن تقریبا صفر است؛ در نتیجه یک عبارت شرطی، حجم این فایل را چک کرده و مطمئن می‌شود که خالی است و جداول users و comments که به ترتیب مربوط به پروفایل‌ها و نظرات هستند، ساخته می‌شود.
همچنین چند رکورد تست که فقط برای نمایش قابلیت‌های سایت هستند در جداول اضافه می‌شوند که پروفایل مدرس کلاس، یکی از این رکوردهاست.
فیلدهای جدول کاربران: نام کاربری، کلمه‌عبور، نام، نام خانوادگی، عنوان رزومه، متن رزومه، تاریخ ایجاد رزومه
فیلدهای جدول نظرات: نام کاربری فرستنده، نام کاربری گیرنده، متن کامنت، تاریخ ایجاد کامنت

      2. صفحه‌ی اصلی: با ورود به دایرکتوری ‘/’ یا خانه، رزومه‌های موجود در پایگاه داده که هرکدام یک فیلد متنی در هر پروفایل هستند با استفاده از تابع fetchall() که تمام سطرها را تحویل می‌دهد، خوانده می‌شوند. رزومه‌های کاربران به صورت یک لیست از رشته‌ها در متغیر _rows ریخته شده و به صفحه‌ی HTML آن با نام ‘homePage.html’ تحویل داده می‌شوند. ساخت و اجرای هر صفحه‌ی HTML با تابع render_template() انجام می‌شود.

      3. سیستم ثبت نام: در مسیر ‘/register’ صفحه‌ی ‘registerPage.html’ ساخته می‌شود که شامل فرم ثبت است. مشخصات کاربری یوزرنیم، پسورد، اسم و فامیل هستند و این اطلاعات با روش POST به صورت یک فرم request به تابع isLegit() در فلاسک فرستاده می‌شود. در این تابع ابتدا خالی نبودن فیلدها چک می‌شود و در صورتی که همه‌ی آنها پر نشده باشند یک پیغام خطا در صفحه به نمایش درمی‌آید. 
پس از اطمینان از خالی نبودن فیلدها، یک عبارت try جهت رسیدگی به خطای جامعیت پایگاه داده قرار داده شده که نقض منحصربفرد بودن نام کاربری است. اگر نام کاربری وارد شده تکراری باشد، یک پیغام خطا نشان داده می‌شود و در غیر این صورت، اطلاعات دریافتی هیچ مشکلی نداشته و آماده‌ی ثبت در پایگاه داده هستند.
در ادامه، کاربر موردنظر ثبت نام و به صورت خودکار وارد سیستم می‌شود؛ به این معنی که متغیر ‘logged_in’ در جلسه، مقدار True می‌گیرد که این مقدار، معیاری برای به‌یاد ماندن کاربر و اضافه شدن بسیاری از امکانات سایت است. همچنین نام کاربری فرد در متغیر ‘username’ جلسه ذخیره می‌شود تا بتوان با استفاده از آن، اطلاعات فرد را همیشه از پایگاه داده دریافت کرد.

      4. سیستم ورود: اگر کاربر در سایت ثبت نام کند، به صورت خودکار وارد سایت می‌شود اما باید سیستمی دیگر درنظر گرفت تا پس از خروج، بتوان دوباره وارد سیستم شد. در مسیر ‘/login’ یک صفحه با نام “loginPage.html” ساخته می‌شود که در آن یک فرم ساده شامل نام کاربری و کلمه‌ی عبور است.
پس از ارسال این فرم با روش POST به تابع isUser() و چک کردن خالی نبودن فیلدها، مشخصات ورودی جهت احراز هویت به پایگاه داده فرستاده می‌شوند و درصورتی که آن کاربر پیدا شود، فقط یک رکورد به ما برمی‌گرداند که باید با تابع fetchone() در متغیر row ریخته شود. اگر مقداری داخل متغیر row نباشد قطعا نام کاربری یا کلمه‌ی عبور اشتباه بوده و پایگاه‌داده چیزی fetch نکرده است و درنتیجه یک پیغام خطا نشان داده می‌شود.
درصورت موفقیت و تطبیق هویت، کاربر وارد سیستم شده و مقادیر مناسب در جلسه ذخیره می‌شوند. لازم به ذکر است که تابع SignOut() در مسیر ‘/logout’ این متغیرها را ریست می‌کند و درنتیجه کاربر از سیستم خارج می‌شود.

      5. پنل کاربری: پس از تشخیص ورود کاربر، امکاناتی در دسترس وی قرار می‌گیرند که شامل ثبت رزومه، حذف آن، تغییر رمز‌عبور و ثبت نظر درباره‌ی رزومه‌ی دیگران می‌باشند. کاربرانی که وارد سیستم نشده‌اند نیز می‌توانند نظرات خود را ثبت کنند ولی همه‌ی این نظرات فقط به عنوان "مهمان" ذخیره می‌شوند و فرقی بین آنها وجود نخواهد داشت.
پنل کاربری در مسیر ‘/panel’ قرار دارد که تابع GetPanel() را فراخوانی کرده و ورود کاربر را بررسی می‌کند. 
اگر کاربر، وارد سیستم نشده باشد به ‘/login’ هدایت شده و درغیر این صورت رزومه‌ی شخص با استفاده از یوزرنیم ذخیره شده در جلسه، بازیابی می‌شود. درصورتی که فرد رزومه‌ای ثبت نکرده باشد مقدار False در متغیر resm باقی می‌ماند که در نهایت اجازه‌ی اضافه کردن یک رزومه به او داده می‌شود و درغیر این صورت True است که این امکان را به فرد می‌دهد تا آن را حذف کند.
تابع EditResume(user_name) نام کاربری شخص را از آدرس ‘/edit/<string:user_name>’ گرفته و مقادیر رزومه‌ی فرد را برابر با فرمی که در پنل کاربری پر خواهد کرد، می‌گذارد و در صورتی که فرد رزومه‌ای از قبل ثبت کرده باشد می‌تواند آن را حذف کند. تابع DeleteResume(user_name) پس از دریافت نام کاربری، مقادیر رزومه‌ی فرد را برابر با NULL می‌گذارد که به معنی فقدان رزومه برای بازیابی‌های بعدی سیستم است.
درنهایت امکان تغییر کلمه‌ی عبور نیز فراهم شده است که در فرم پایین صفحه قرار دارد. پس از ثبت فرم تغییر رمز، سایت به مسیر ‘/password’ ارجاع داده شده که در آن تابع ChangePass() اجرا می‌شود. در این تابع پس از حصول اطمینان از خالی نبودن فیلدها، پسورد جدید با تایید آن مقایسه شده و اگر مطابقت نداشته باشند، ارتباطی با پایگاه داده برقرار نمی‌شود. بعد از مطابقت و موفقیت پسورد جدید، پسورد قدیمی بازیابی می‌شود و اگر کاربر آن را درست وارد کرده باشد، پسورد جدید به عنوان کلمه‌ی عبور فعلی در رکورد کاربر ذخیره می‌شود.

      6. نمایش رزومه ها: تنها راهی که می‌توان به رزومه‌ها از داخل سایت دسترسی داشت، صفحه‌ی اصلی است. این رزومه‌ها لیستی از برخی مشخصات فرد سازنده هستند و نام کاربری شخص در لینک آنها وجود دارد؛ درنتیجه وقتی روی آنها کلیک کنیم، نام کاربری ایجاد کننده‌ی رزومه در رشته‌ی ‘/resumes/<string:user_name>’ قرار داده شده و به تابع GetResume(user_name) تحویل داده می‌شود.
در این تابع ابتدا عنوان رزومه، متن و تاریخ ایجاد آن که به صورت unix ذخیره کرده‌ایم جهت نمایش دریافت شده و با fetchone() در متغیر _row قرار می‌گیرد. سپس از جدول کامنت‌ها، تمام نظراتی که به این رزومه مربوط هستند و از قبل ثبت شده‌اند با fetchall() در لیست _cmt ریخته می‌شوند. در ادامه یک عبارت شرطی نیز اجرا می‌شود که چک می‌کند آیا کاربر فعلی ادمین است یا خیر؛ سپس پاسخ آن همراه با متغیرهای _row و _cmt به صفحه‌ی ‘resumePage.html’ تحویل داده می‌شود تا درباره‌ی ایجاد امکان ویرایش و حذف رزومه تصمیم بگیرد.
ثبت نظر برای هر رزومه با پر کردن یک فرم تک فیلدی و زدن دکمه‌ی enter انجام می‌شود که این نظر به همراه نام صاحب رزومه با روش POST به مسیر ‘/sendComment/<string:user_name>’ رفته و در تابع SetComment(user_name) درباره‌ی آن تصمیم‌گیری می‌شود. اگر نظر خالی نباشد، نام فرستنده‌ی نظر به‌صورت پیشفرض "مهمان" درنظر گرفته می‌شود و درصورتی که کاربر وارد سیستم شده باشد، نام کاربری فرد جایگزین آن می‌گردد. سپس ترکیب صاحب رزومه، تاریخ ثبت، فرستنده‌ی نظر و متن آن به عنوان یک رکورد در جدول comments ذخیره می‌شود.
ویرایش و حذف رزومه فقط برای ادمین سایت ممکن است و به ترتیب مسیرهای ‘/edit/<string:user_name>’ و ‘/delete/<string:user_name>’ این کارها را انجام می‌دهند. در ویرایش رزومه، تابع EditResume() نام صاحب رزومه را گرفته و متن رزومه به همراه عنوان آن را به صفحه‌ی ‘editPage.html’ می‌دهد تا آنها را جهت ویرایش به نمایش بگذارد و پس از آن، این مقادیر به ‘/update/<string:user_name>’ بازگشت داده شده تا جایگزین مقادیر قبلی شوند.
تابع DeleteResume() نیز نام صاحب رزومه را گرفته و فقط به‌جای متن و عنوان آن، NULL قرار می‌دهد.

      7. سند و سورس کد برنامه: این اسناد، فایل‌های متنی یا text هستند که در فولدر اصلی برنامه ذخیره شده‌اند. زمانی که کاربر روی لینک مشاهده‌ی اسناد کلیک کند، تابع GetDocs() اجرا شده، ادمین بودن شخص را چک کرده و پس از موفقیت در تطبیق آن‌ها، نسخه‌ی تکست این سند را به صورت فایل متنی باز کرده و صفحه‌ی HTML نمایش اسناد که همان صفحه‌ی resumePage.html با کمی تغییر است، اجرا می‌شود. به دلیل فارسی بودن سند، به کدنگاری UTF-8 نیاز است که در باز کردن فایل اعمال می‌شود.
هنگامی که ادمین روی ویرایش کلیک کند، یک صفحه‌ی ویرایش متن با نام ‘editDocs.html’ ساخته می‌شود که محتوای فایل کاملا خوانده شده را گرفته و برای تغییر در دسترس وی قرار می‌دهد. سپس با فشردن دکمه‌ی ثبت، تابع UpdateDocs() در مسیر ‘/updateDocs’ اجرا می‌شود که فرم را دربافت کرده و فایل را با محتوای آن Overwrite می‌کند.
در بالای صفحه، یک لینک قرار داده شده است که کاربر را به مسیر ‘/sourceCode’ می‌برد؛ تابع GetSource() فایل ‘source.dat’ موجود در فولدر اصلی را خوانده و کد پایتون سایت را در صفحه‌ی ‘sourcePage.html’ به نمایش می‌گذارد.


توضیحات HTML

      1. بخش‌های مشترک: تمام صفحات استفاده شده در این پروژه، از header و body مشترک موجود در صفحه‌ی ‘layout.html’ استفاده می‌کنند که شامل یکسری تزئینات CSS، فونت bootstrap و یک نوار ابزار می‌باشد.
هر صفحه‌ای که بخواهد از این قسمت استفاده کند، باید تگ {% extends ‘layout.html’ %} را داشته باشد تا صفحه از ادامه‌ی آن ساخته شود. همچنین هر کدی که بین عبارات {% block body %} و {%  end block %} قرار بگیرد، در بخش body چسبانده خواهد شد.
هر صفحه باید قبل از render شدن، متغیر {{login}} را مقداردهی کند تا این متغیر درباره‌ی نشان دادن امکانات کاربری در نوار ابزار، تصمیم بگیرد. اگر کاربر وارد سیستم نشده باشد، صفحه‌ی ورود و عضویت و درغیر این صورت پنل کاربری و خروج به آن اضافه می‌شود.

      2. صفحه‌ی اصلی: متغیر {{FULL_NAME}} نام و نام خانوادگی کاربر فعلی را گرفته و در سرتیتر صفحه‌ی اصلی که یک کلاس “jumbotron” است، چاپ می‌کند. برای نمایش رزومه‌ها، لیست مشخصات آنها در متغیر {{ROWS}} ریخته می‌شود و در یک حلقه‌ی for به هریک از فرم‌های نمایش داده شده، لینکی حاوی نام صاحب آن رزومه تخصیص داده می‌شود تا هروقت روی آن کلیک کنیم، این نام به پایگاه داده رفته و محتوای رزومه‌ی فرد به ما تحویل داده شود.

      3. صفحه‌ی ورود و ثبت‌نام: این صفحات ساختاری تقریبا یکسانی دارند. در هر دوی آنها تعدادی input field و یک دکمه‌ی ثبت با روش POST قرار داده شده که کاربر با کلیک روی آنها، محتوای فرم را به سرور می‌فرستند. در این صفحات، چند متغیر متنی پنهانی از جمله {{WRONG_ERR}} و {{EMPTY_ERR}} نیز قرارداده شده است که با مقداردهی آنها توسط سرور در صورت نیاز، یک پیام مرتبط نشان داده می‌شود. برای مثال اگر یک فیلد خالی باشد و کاربر بخواهد submit کند، سرور آنرا تشخیص داده و پیام "لطفا فرم را کامل کنید" در متغیر {{EMPTY_ERR}} ریخته می‌شود و با ساختن دوباره‌ی صفحه، به نمایش درمی‌آید.

      4. فیدبک: در بعضی از مواقع، نیاز به عوض کردن یک صفحه و آگاه کردن کاربر نسبت به روال کار داریم. مثلا کاربر با موفقیت وارد سیستم شده است و می‌خواهیم علاوه بر خبردادن به کاربر، صفحه‌ی جدیدی بسازیم؛ درنتیجه یک صفحه‌ساده به نام ‘feedback.html’ ساخته شده است که فقط اتفاق پیش آمده را با یک string دریافت می‌کند و آن را نشان می‌دهد.

      5. صفحه‌ی رزومه: این صفحه، اطلاعات کاربری صاحب رزومه و محتوای رزومه را از {{ROW}} دریافت می‌کند و در بالای صفحه نشان می‌دهد؛ سپس از لیست {{CMT}} هریک از کامنت‌های آن را در یک حلقه‌ی for گرفته و تک‌تک در پایین صفحه قرار می‌دهد. فیلد نوشتن نظر نیز یک فرم معمولی با روش POST می‌باشد.

      6. متفرقه: بقیه‌ی صفحات HTML در این پروژه نیز صرفا فقط از ترکیب یا شکل تغییریافته‌ی روش‌های بالا استفاده می‌کنند و چیز جدیدی در آنها استفاده نشده است.
      
